{"version":3,"sources":["../node_modules/enquire.js/src/index.js","../node_modules/enquire.js/src/Util.js","../node_modules/create-react-class/index.js","../node_modules/enquire.js/src/MediaQueryDispatch.js","../node_modules/enquire.js/src/MediaQuery.js","../node_modules/enquire.js/src/QueryHandler.js","../node_modules/create-react-class/factory.js","../node_modules/fbjs/lib/emptyObject.js","../node_modules/fbjs/lib/invariant.js"],"names":["MediaQueryDispatch","module","exports","isFunction","target","isArray","Object","prototype","toString","apply","each","collection","fn","i","length","React","factory","Error","ReactNoopUpdateQueue","Component","updater","isValidElement","MediaQuery","Util","window","matchMedia","this","queries","browserIsIncapable","matches","constructor","register","q","options","shouldDegrade","isUnconditional","match","handler","addHandler","unregister","query","removeHandler","clear","QueryHandler","handlers","mql","self","listener","currentTarget","assess","addListener","constuctor","qh","push","on","h","equals","destroy","splice","removeListener","action","deferSetup","setup","initialised","off","unmatch","_assign","emptyObject","_invariant","MIXINS_KEY","ReactComponent","injectedMixins","ReactClassInterface","mixins","statics","propTypes","contextTypes","childContextTypes","getDefaultProps","getInitialState","getChildContext","render","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","updateComponent","ReactClassStaticInterface","getDerivedStateFromProps","RESERVED_SPEC_KEYS","displayName","Constructor","_displayName","_mixins","mixSpecIntoComponent","_childContextTypes","_contextTypes","_getDefaultProps","createMergedResultFunction","_propTypes","_statics","name","property","hasOwnProperty","specPolicy","mixStaticSpecIntoComponent","autobind","validateMethodOverride","isAlreadyDefined","ReactClassMixin","spec","proto","autoBindPairs","__reactAutoBindPairs","isReactClassMethod","createChainedFunction","mergeIntoWithNoDuplicateKeys","one","two","key","undefined","a","arguments","b","c","bindAutoBindMethod","component","method","bind","IsMountedPreMixin","__isMounted","IsMountedPostMixin","replaceState","newState","callback","enqueueReplaceState","isMounted","ReactClassComponent","props","context","pairs","autoBindKey","bindAutoBindMethods","refs","state","initialState","Array","methodName","forEach","defaultProps","validateFormat","format","condition","d","e","f","error","args","argIndex","replace","framesToPop"],"mappings":"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","file":"static/js/3.95cfd5d7.chunk.js","sourcesContent":["var MediaQueryDispatch = require('./MediaQueryDispatch');\n\nmodule.exports = new MediaQueryDispatch();","/**\n * Helper function for iterating over a collection\n *\n * @param collection\n * @param fn\n */\nfunction each(collection, fn) {\n  var i = 0,\n      length = collection.length,\n      cont;\n\n  for (i; i < length; i++) {\n    cont = fn(collection[i], i);\n\n    if (cont === false) {\n      break; //allow early exit\n    }\n  }\n}\n/**\n * Helper function for determining whether target object is an array\n *\n * @param target the object under test\n * @return {Boolean} true if array, false otherwise\n */\n\n\nfunction isArray(target) {\n  return Object.prototype.toString.apply(target) === '[object Array]';\n}\n/**\n * Helper function for determining whether target object is a function\n *\n * @param target the object under test\n * @return {Boolean} true if function, false otherwise\n */\n\n\nfunction isFunction(target) {\n  return typeof target === 'function';\n}\n\nmodule.exports = {\n  isFunction: isFunction,\n  isArray: isArray,\n  each: each\n};","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar React = require('react');\n\nvar factory = require('./factory');\n\nif (typeof React === 'undefined') {\n  throw Error('create-react-class could not find the React object. If you are using script tags, ' + 'make sure that React is being loaded before create-react-class.');\n} // Hack to grab NoopUpdateQueue from isomorphic React\n\n\nvar ReactNoopUpdateQueue = new React.Component().updater;\nmodule.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);","var MediaQuery = require('./MediaQuery');\n\nvar Util = require('./Util');\n\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\n/**\n * Allows for registration of query handlers.\n * Manages the query handler's state and is responsible for wiring up browser events\n *\n * @constructor\n */\n\nfunction MediaQueryDispatch() {\n  if (!window.matchMedia) {\n    throw new Error('matchMedia not present, legacy browsers require a polyfill');\n  }\n\n  this.queries = {};\n  this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\n\nMediaQueryDispatch.prototype = {\n  constructor: MediaQueryDispatch,\n\n  /**\n   * Registers a handler for the given media query\n   *\n   * @param {string} q the media query\n   * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\n   * @param {function} options.match fired when query matched\n   * @param {function} [options.unmatch] fired when a query is no longer matched\n   * @param {function} [options.setup] fired when handler first triggered\n   * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\n   * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\n   */\n  register: function register(q, options, shouldDegrade) {\n    var queries = this.queries,\n        isUnconditional = shouldDegrade && this.browserIsIncapable;\n\n    if (!queries[q]) {\n      queries[q] = new MediaQuery(q, isUnconditional);\n    } //normalise to object in an array\n\n\n    if (isFunction(options)) {\n      options = {\n        match: options\n      };\n    }\n\n    if (!isArray(options)) {\n      options = [options];\n    }\n\n    each(options, function (handler) {\n      if (isFunction(handler)) {\n        handler = {\n          match: handler\n        };\n      }\n\n      queries[q].addHandler(handler);\n    });\n    return this;\n  },\n\n  /**\n   * unregisters a query and all it's handlers, or a specific handler for a query\n   *\n   * @param {string} q the media query to target\n   * @param {object || function} [handler] specific handler to unregister\n   */\n  unregister: function unregister(q, handler) {\n    var query = this.queries[q];\n\n    if (query) {\n      if (handler) {\n        query.removeHandler(handler);\n      } else {\n        query.clear();\n        delete this.queries[q];\n      }\n    }\n\n    return this;\n  }\n};\nmodule.exports = MediaQueryDispatch;","var QueryHandler = require('./QueryHandler');\n\nvar each = require('./Util').each;\n/**\n * Represents a single media query, manages it's state and registered handlers for this query\n *\n * @constructor\n * @param {string} query the media query string\n * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design\n */\n\n\nfunction MediaQuery(query, isUnconditional) {\n  this.query = query;\n  this.isUnconditional = isUnconditional;\n  this.handlers = [];\n  this.mql = window.matchMedia(query);\n  var self = this;\n\n  this.listener = function (mql) {\n    // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly\n    self.mql = mql.currentTarget || mql;\n    self.assess();\n  };\n\n  this.mql.addListener(this.listener);\n}\n\nMediaQuery.prototype = {\n  constuctor: MediaQuery,\n\n  /**\n   * add a handler for this query, triggering if already active\n   *\n   * @param {object} handler\n   * @param {function} handler.match callback for when query is activated\n   * @param {function} [handler.unmatch] callback for when query is deactivated\n   * @param {function} [handler.setup] callback for immediate execution when a query handler is registered\n   * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?\n   */\n  addHandler: function addHandler(handler) {\n    var qh = new QueryHandler(handler);\n    this.handlers.push(qh);\n    this.matches() && qh.on();\n  },\n\n  /**\n   * removes the given handler from the collection, and calls it's destroy methods\n   *\n   * @param {object || function} handler the handler to remove\n   */\n  removeHandler: function removeHandler(handler) {\n    var handlers = this.handlers;\n    each(handlers, function (h, i) {\n      if (h.equals(handler)) {\n        h.destroy();\n        return !handlers.splice(i, 1); //remove from array and exit each early\n      }\n    });\n  },\n\n  /**\n   * Determine whether the media query should be considered a match\n   *\n   * @return {Boolean} true if media query can be considered a match, false otherwise\n   */\n  matches: function matches() {\n    return this.mql.matches || this.isUnconditional;\n  },\n\n  /**\n   * Clears all handlers and unbinds events\n   */\n  clear: function clear() {\n    each(this.handlers, function (handler) {\n      handler.destroy();\n    });\n    this.mql.removeListener(this.listener);\n    this.handlers.length = 0; //clear array\n  },\n\n  /*\n      * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match\n      */\n  assess: function assess() {\n    var action = this.matches() ? 'on' : 'off';\n    each(this.handlers, function (handler) {\n      handler[action]();\n    });\n  }\n};\nmodule.exports = MediaQuery;","/**\n * Delegate to handle a media query being matched and unmatched.\n *\n * @param {object} options\n * @param {function} options.match callback for when the media query is matched\n * @param {function} [options.unmatch] callback for when the media query is unmatched\n * @param {function} [options.setup] one-time callback triggered the first time a query is matched\n * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?\n * @constructor\n */\nfunction QueryHandler(options) {\n  this.options = options;\n  !options.deferSetup && this.setup();\n}\n\nQueryHandler.prototype = {\n  constructor: QueryHandler,\n\n  /**\n   * coordinates setup of the handler\n   *\n   * @function\n   */\n  setup: function setup() {\n    if (this.options.setup) {\n      this.options.setup();\n    }\n\n    this.initialised = true;\n  },\n\n  /**\n   * coordinates setup and triggering of the handler\n   *\n   * @function\n   */\n  on: function on() {\n    !this.initialised && this.setup();\n    this.options.match && this.options.match();\n  },\n\n  /**\n   * coordinates the unmatch event for the handler\n   *\n   * @function\n   */\n  off: function off() {\n    this.options.unmatch && this.options.unmatch();\n  },\n\n  /**\n   * called when a handler is to be destroyed.\n   * delegates to the destroy or unmatch callbacks, depending on availability.\n   *\n   * @function\n   */\n  destroy: function destroy() {\n    this.options.destroy ? this.options.destroy() : this.off();\n  },\n\n  /**\n   * determines equality by reference.\n   * if object is supplied compare options, if function, compare match callback\n   *\n   * @function\n   * @param {object || function} [target] the target for comparison\n   */\n  equals: function equals(target) {\n    return this.options === target || this.options.match === target;\n  }\n};\nmodule.exports = QueryHandler;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\n\nvar _invariant = require('fbjs/lib/invariant');\n\nif (process.env.NODE_ENV !== 'production') {\n  var warning = require('fbjs/lib/warning');\n}\n\nvar MIXINS_KEY = 'mixins'; // Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\n\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\n\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n  var injectedMixins = [];\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n\n  var ReactClassInterface = {\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillMount`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillReceiveProps`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillUpdate`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillUpdate: 'DEFINE_MANY',\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n  };\n  /**\n   * Similar to ReactClassInterface but for static methods.\n   */\n\n  var ReactClassStaticInterface = {\n    /**\n     * This method is invoked after a component is instantiated and when it\n     * receives new props. Return an object to update state in response to\n     * prop changes. Return null to indicate no change to state.\n     *\n     * If an object is returned, its keys will be merged into the existing state.\n     *\n     * @return {object || null}\n     * @optional\n     */\n    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\n  };\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n\n  var RESERVED_SPEC_KEYS = {\n    displayName: function displayName(Constructor, _displayName) {\n      Constructor.displayName = _displayName;\n    },\n    mixins: function mixins(Constructor, _mixins) {\n      if (_mixins) {\n        for (var i = 0; i < _mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, _mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function childContextTypes(Constructor, _childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, _childContextTypes, 'childContext');\n      }\n\n      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);\n    },\n    contextTypes: function contextTypes(Constructor, _contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, _contextTypes, 'context');\n      }\n\n      Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);\n    },\n\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);\n      } else {\n        Constructor.getDefaultProps = _getDefaultProps;\n      }\n    },\n    propTypes: function propTypes(Constructor, _propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, _propTypes, 'prop');\n      }\n\n      Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);\n    },\n    statics: function statics(Constructor, _statics) {\n      mixStaticSpecIntoComponent(Constructor, _statics);\n    },\n    autobind: function autobind() {}\n  };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        if (process.env.NODE_ENV !== 'production') {\n          warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);\n        }\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null; // Disallow overriding of base class methods unless explicitly allowed.\n\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);\n    } // Disallow defining methods more than once unless explicitly allowed.\n\n\n    if (isAlreadyDefined) {\n      _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);\n    }\n  }\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n\n\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n        if (process.env.NODE_ENV !== 'production') {\n          warning(isMixinValid, \"%s: You're attempting to include a mixin that is either null \" + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);\n        }\n      }\n\n      return;\n    }\n\n    _invariant(typeof spec !== 'function', \"ReactClass: You're attempting to \" + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');\n\n    _invariant(!isValidElement(spec), \"ReactClass: You're attempting to \" + 'use a component as a mixin. Instead, just use a regular object.');\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs; // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name]; // These cases should already be caught by validateMethodOverride.\n\n            _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name); // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n\n\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n\n    for (var name in statics) {\n      var property = statics[name];\n\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = name in RESERVED_SPEC_KEYS;\n\n      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);\n\n      var isAlreadyDefined = name in Constructor;\n\n      if (isAlreadyDefined) {\n        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;\n\n        _invariant(specPolicy === 'DEFINE_MANY_MERGED', 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);\n\n        Constructor[name] = createMergedResultFunction(Constructor[name], property);\n        return;\n      }\n\n      Constructor[name] = property;\n    }\n  }\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n\n\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);\n\n        one[key] = two[key];\n      }\n    }\n\n    return one;\n  }\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n\n\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n\n\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n\n\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n\n      boundMethod.bind = function (newThis) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        } // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n\n\n        if (newThis !== component && newThis !== null) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);\n          }\n        } else if (!args.length) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);\n          }\n\n          return boundMethod;\n        }\n\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n\n    return boundMethod;\n  }\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n\n\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedPreMixin = {\n    componentDidMount: function componentDidMount() {\n      this.__isMounted = true;\n    }\n  };\n  var IsMountedPostMixin = {\n    componentWillUnmount: function componentWillUnmount() {\n      this.__isMounted = false;\n    }\n  };\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n\n  var ReactClassMixin = {\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function replaceState(newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function isMounted() {\n      if (process.env.NODE_ENV !== 'production') {\n        warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');\n        this.__didWarnIsMounted = true;\n      }\n\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function ReactClassComponent() {};\n\n  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n\n\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function (props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n      if (process.env.NODE_ENV !== 'production') {\n        warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');\n      } // Wire up auto-binding\n\n\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n      this.state = null; // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (initialState === undefined && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n\n      _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n    mixSpecIntoComponent(Constructor, spec);\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin); // Initialize the defaultProps property after all mixins have been merged.\n\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');\n\n    if (process.env.NODE_ENV !== 'production') {\n      warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');\n      warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');\n      warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, '%s has a method called UNSAFE_componentWillRecieveProps(). ' + 'Did you mean UNSAFE_componentWillReceiveProps()?', spec.displayName || 'A component');\n    } // Reduce time spent doing lookups by setting these on the prototype.\n\n\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n\n    throw error;\n  }\n}\n\nmodule.exports = invariant;"],"sourceRoot":""}